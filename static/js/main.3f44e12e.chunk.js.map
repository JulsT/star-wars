{"version":3,"sources":["components/Error/death-star.png","components/NavBar/NavBar.jsx","utils/callApi.js","components/Spinner/Spinner.jsx","components/PlanetSlider/PlanetSlider.jsx","components/ListItems.jsx","components/InfoCard.jsx","components/MainContainer.jsx","components/Error/Error.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","Link","to","NavLink","apiUrl","baseImageUrl","getData","_x","_getData","apply","this","arguments","_callee","endpoint","id","response","_args","regenerator_default","wrap","_context","prev","next","length","undefined","fetch","concat","sent","ok","Error","json","abrupt","stop","getId","url","match","getDetails","data","label","value","name","birth_year","gender","population","diameter","rotation_period","terrain","model","cost_in_credits","max_atmosphering_speed","hyperdrive_rating","starship_class","showImage","_x3","_x4","_showImage","_callee3","imageUrl","_context3","status","Spinner","PlanetSlider","state","planets","_this","props","intervalId","randomId","hasError","timer","getRandomPlanet","Math","floor","random","setState","setInterval","clearInterval","_this$state","Fragment","components_Spinner_Spinner","src","alt","nextProps","loading","Component","ListItems","previous","handleChangePage","page","then","res","results","path","console","log","t0","prevProps","_this2","getInfoCard","map","el","key","created","onClick","aria-label","InfoCard","_this$props","selectedItem","item","index","MainContainer","tableDetail","components_ListItems","components_InfoCard","ErrorBoundary","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","icon","React","App","components_Error_Error","components_NavBar_NavBar","components_PlanetSlider_PlanetSlider","Switch","Route","render","components_MainContainer","Redirect","from","exact","Boolean","window","location","hostname","ReactDOM","HashRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f44e12e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.9b96730e.png\";","import React from \"react\";\nimport \"./NavBar.css\";\nimport { Link, NavLink } from \"react-router-dom\";\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n      <Link to=\"/\" className=\"navbar-brand\">\n        <h1>Star DB</h1>\n      </Link>\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <NavLink to=\"/people\" className=\"nav-link link\">\n            People\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink to=\"/planets\" className=\"nav-link link\">\n            Planets\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink to=\"/starships\" className=\"nav-link link\">\n            Starships\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","const apiUrl = \"https://swapi.co/api\";\nconst baseImageUrl = \"https://starwars-visualguide.com/assets/img\";\n\nexport async function getData(endpoint, id = \"\") {\n  const response = await fetch(`${apiUrl}${endpoint}${id}`);\n  if (!response.ok) {\n    throw new Error(\"Couldnt fetch\");\n  }\n  return await response.json();\n  // try {\n  //   const response = await fetch(`${apiUrl}${endpoint}${id}`);\n  //   console.log(\"response\", response.ok);\n  //   return response.json();\n  // } catch (error) {\n  //   // console.log(\"error in callApi\", error);\n  //   throw new Error(\"throw new Error in callApi\");\n  // }\n}\nexport function getId(url) {\n  const regular = /\\/([0-9]*)\\/$/;\n  const id = url.match(regular)[1];\n  return id;\n}\n\nexport async function getRandomPlanet(id) {\n  try {\n    const response = await fetch(`${apiUrl}/planets/${id}`);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function getDetails(endpoint, data) {\n  switch (endpoint) {\n    case \"/people\":\n      return [\n        { label: \"\", value: data.name },\n        { label: \"Birth year\", value: data.birth_year },\n        { label: \"Gender\", value: data.gender },\n        { label: \"Birth year\", value: data.birth_year }\n      ];\n\n    case \"/planets\":\n      return [\n        { label: \"\", value: data.name },\n        { label: \"Population\", value: data.population },\n        { label: \"Diameter\", value: data.diameter },\n        { label: \"Rotation_period\", value: data.rotation_period },\n        { label: \"Terrain\", value: data.terrain }\n      ];\n\n    case \"/starships\":\n      return [\n        { label: \"\", value: data.name },\n        { label: \"Model\", value: data.model },\n        { label: \"Cost\", value: data.cost_in_credits },\n        { label: \"Length\", value: data.length },\n        { label: \"Max speed\", value: data.max_atmosphering_speed },\n        { label: \"Hyperdrive Rating\", value: data.hyperdrive_rating },\n        { label: \"Starship Class\", value: data.starship_class }\n      ];\n\n    default:\n      return [];\n  }\n}\nexport async function showImage(endpoint, id) {\n  let imageUrl = null;\n  if (endpoint === \"/people\") {\n    endpoint = \"/characters\";\n  }\n  const url = await fetch(`${baseImageUrl}${endpoint}/${id}.jpg`);\n  if (url.status === 200) {\n    imageUrl = url.url;\n  } else {\n    imageUrl =\n      \"https://starwars-visualguide.com/assets/img/big-placeholder.jpg\";\n  }\n  return imageUrl;\n}\n","import React from \"react\";\nimport \"./Spinner.css\";\nconst Spinner = () => {\n  return (\n    <div className=\"d-flex flex-column justify-content-center align-items-center\">\n      <strong className=\"spinner-header\">Loading...</strong>\n      <div className=\"lds-dual-ring\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport { showImage } from \"../../utils/callApi\";\nimport Spinner from \"../Spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nclass PlanetSlider extends Component {\n  state = {\n    planets: this.props.planets,\n    intervalId: null,\n    randomId: 0,\n    imageUrl: \"\",\n    hasError: false\n  };\n  static getDerivedStateFromProps(nextProps) {\n    return {\n      planets: nextProps.planets,\n      loading: false\n    };\n  }\n  componentDidMount() {\n    const intervalId = setInterval(this.timer, 20000);\n    this.getRandomPlanet();\n    this.setState({\n      intervalId\n    });\n  }\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n  timer = () => {\n    this.getRandomPlanet();\n  };\n  getRandomPlanet = async () => {\n    const randomId = Math.floor(Math.random() * this.state.planets.length);\n    // const randomId = 12000;\n    const imageUrl = await showImage(\"/planets\", randomId + 2);\n    this.setState({\n      randomId,\n      imageUrl\n    });\n  };\n  render() {\n    const { planets, imageUrl, randomId } = this.state;\n    return (\n      <React.Fragment>\n        {planets.length === 0 ? (\n          <Spinner />\n        ) : (\n          <div className=\"card bg-secondary text-white\">\n            <div className=\"row my-row no-gutters\">\n              <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <img src={imageUrl} className=\"p-2 card-img \" alt=\"...\" />\n              </div>\n              <div className=\" col-sm-6 col-md-8 col-lg-9 pl-4\">\n                <div className=\"card-body\">\n                  <h3 className=\"card-title\">{planets[randomId].name}</h3>\n                  <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">\n                      Population:{planets[randomId].population}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Rotation Period:{planets[randomId].rotation_period}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Diameter: {planets[randomId].diameter}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\nPlanetSlider.propTypes = {\n  planets: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default PlanetSlider;\n","import React, { Component } from \"react\";\nimport { getData } from \"../utils/callApi\";\nimport { PropTypes } from \"prop-types\";\nclass ListItems extends Component {\n  state = {\n    data: [],\n    next: \"\",\n    previous: \"\"\n  };\n  async componentDidMount() {\n    try {\n      const data = await getData(this.props.match.path);\n      this.setState({\n        data: data.results,\n        next: data.next,\n        previous: data.previous\n      });\n    } catch (error) {\n      console.log(\"error in ListItems\", error);\n    }\n  }\n  async componentDidUpdate(prevProps) {\n    if (this.props.match.path !== prevProps.match.path) {\n      const data = await getData(this.props.match.path);\n      this.setState({\n        data: data.results,\n        next: data.next,\n        previous: data.previous\n      });\n    }\n  }\n  handleChangePage = page => {\n    if (page !== null) {\n      fetch(page)\n        .then(res => res.json())\n        .then(data =>\n          this.setState({\n            data: data.results,\n            next: data.next,\n            previous: data.previous\n          })\n        );\n    }\n  };\n  render() {\n    const { data, next, previous } = this.state;\n    const { getInfoCard } = this.props;\n    return (\n      <div className=\"col-md-6\">\n        <React.Fragment>\n          <ul className=\"list-group pb-3 text-white\">\n            {data.map(el => (\n              <li\n                key={el.created}\n                onClick={() => {\n                  getInfoCard(el.url);\n                }}\n                className=\"list-group-item link-info\"\n              >\n                {el.name}\n              </li>\n            ))}\n          </ul>\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination \">\n              <li\n                className={\n                  previous === null ? \"page-item disabled\" : \"page-item\"\n                }\n              >\n                <button\n                  onClick={() => this.handleChangePage(previous)}\n                  className=\"page-link\"\n                >\n                  Previous\n                </button>\n              </li>\n              <li\n                className={next === null ? \"page-item disabled\" : \"page-item\"}\n              >\n                <button\n                  onClick={() => this.handleChangePage(next)}\n                  className=\"page-link\"\n                >\n                  Next\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nListItems.propTypes = {\n  getInfoCard: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    path: PropTypes.string.isRequired\n  })\n};\nexport default ListItems;\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nclass InfoCard extends Component {\n  render() {\n    const { selectedItem, imageUrl } = this.props;\n    return (\n      <div className=\"col-md-6\">\n        {selectedItem.length === 0 ? (\n          <p className=\"text-monospace text-white\">\n            {\" \"}\n            Choose the item to know more\n          </p>\n        ) : (\n          <div className=\"card bg-secondary text-white \">\n            <div className=\"row my-row no-gutters\">\n              <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <img src={imageUrl} className=\"card-img \" alt=\"...\" />\n              </div>\n              <div className=\" col-sm-6 col-md-8 col-lg-9\">\n                <div className=\"card-body\">\n                  <h3 className=\"card-title\">{selectedItem[0].value}</h3>\n                  <ul className=\"list-group list-group-flush\">\n                    {selectedItem.map(\n                      (item, index) =>\n                        item.label && (\n                          <li key={index} className=\"list-group-item\">\n                            {item.label} : {item.value}\n                          </li>\n                        )\n                    )}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nInfoCard.propTypes = {\n  selectedItem: PropTypes.arrayOf(PropTypes.object).isRequired,\n  imageUrl: PropTypes.string.isRequired\n};\n\nexport default InfoCard;\n","import React, { Component } from \"react\";\nimport ListItems from \"./ListItems\";\nimport InfoCard from \"./InfoCard\";\nimport { getData, showImage, getId, getDetails } from \"../utils/callApi\";\nimport { PropTypes } from \"prop-types\";\nclass MainContainer extends Component {\n  state = { selectedItem: [], imageUrl: \"\" };\n\n  getInfoCard = async url => {\n    try {\n      const id = getId(url);\n      const data = await getData(this.props.match.url, `/${id}/`);\n      console.log(\"Data\", data);\n      const imageUrl = await showImage(this.props.match.url, id);\n      const tableDetail = getDetails(this.props.match.url, data);\n      this.setState({\n        selectedItem: tableDetail,\n        imageUrl\n      });\n    } catch (error) {\n      console.log(\"error in main container\");\n    }\n  };\n  render() {\n    const { match } = this.props;\n    return (\n      <div className=\"row my-3\">\n        <ListItems match={match} getInfoCard={this.getInfoCard} />\n        <InfoCard\n          selectedItem={this.state.selectedItem}\n          imageUrl={this.state.imageUrl}\n        />\n      </div>\n    );\n  }\n}\nMainContainer.propTypes = {\n  match: PropTypes.object.isRequired\n};\nexport default MainContainer;\n","import React from \"react\";\nimport \"./Error.css\";\nimport icon from \"./../Error/death-star.png\";\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    });\n  }\n  render() {\n    // if (this.state.hasError) {\n    // }\n    // return this.props.children;\n    return (\n      <div className=\"text-white text-center\">\n        <img className=\"error-image\" src={icon} alt=\"death-star\" />\n        <h1>Something went wrong...</h1>\n      </div>\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport PlanetSlider from \"./components/PlanetSlider/PlanetSlider\";\nimport { getData } from \"./utils/callApi\";\nimport MainContainer from \"./components/MainContainer\";\nimport ErrorBoundary from \"./components/Error/Error\";\nclass App extends Component {\n  state = {\n    planets: [],\n    hasError: false\n  };\n  async componentDidMount() {\n    try {\n      const data = await getData(\"/planets\");\n      this.setState({\n        planets: data.results\n      });\n    } catch (error) {\n      console.log(\"Error\", error);\n      this.setState({\n        hasError: true\n      });\n    }\n  }\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    });\n  }\n  render() {\n    const { hasError } = this.state;\n\n    return (\n      <React.Fragment>\n        <main className=\"container p-3\">\n          {hasError ? (\n            <ErrorBoundary />\n          ) : (\n            <>\n              <NavBar />\n              <PlanetSlider planets={this.state.planets} />\n\n              <Switch>\n                {[\"/people\", \"/planets\", \"/starships\"].map((path, index) => (\n                  <Route\n                    path={path}\n                    render={props => <MainContainer {...props} />}\n                    key={index}\n                  />\n                ))}\n                <Redirect from=\"/\" exact to=\"/people\" />\n                <Redirect to=\"/\" />\n              </Switch>\n            </>\n          )}\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}